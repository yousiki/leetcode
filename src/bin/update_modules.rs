use std::fs;
use std::io::Write;
use std::path::Path;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Generate lib.rs content
    let mut lib_content = String::new();
    lib_content.push_str("// This file is automatically generated by the update_modules script.\n");
    lib_content.push_str("// Do not edit manually - your changes will be overwritten.\n\n");

    lib_content.push_str(scan_dir("src/solutions").as_str());
    lib_content.push_str(scan_dir("src/contests").as_str());

    // Write the updated lib.rs
    let lib_path = Path::new("src/lib.rs");
    let mut lib_file = fs::File::create(lib_path)?;
    lib_file.write_all(lib_content.as_bytes())?;

    Ok(())
}

fn scan_dir(dir: &str) -> String {
    let dir = Path::new(dir);

    let mut lib_content = String::new();

    if !dir.exists() {
        return lib_content;
    }

    // Read all .rs files from the solutions directory
    let mut solution_files = Vec::new();
    for entry in fs::read_dir(dir).unwrap() {
        let entry = entry.unwrap();
        let path = entry.path();

        if path.is_file() {
            if let Some(extension) = path.extension() {
                if extension == "rs" {
                    if let Some(file_name) = path.file_name() {
                        if let Some(file_name_str) = file_name.to_str() {
                            solution_files.push(file_name_str.to_string());
                        }
                    }
                }
            }
        }
    }

    // Sort files alphabetically for consistent output
    solution_files.sort();

    println!(
        "Found {} solution files from {}:",
        solution_files.len(),
        dir.display()
    );
    for file in &solution_files {
        println!("  - {}", file);
    }

    let dirname = dir.file_name().unwrap().to_str().unwrap();

    for file in &solution_files {
        let file_name_without_ext = file.strip_suffix(".rs").unwrap();
        let module_name = file_name_without_ext.replace("-", "_");

        lib_content.push_str(&format!(
            "#[path = \"{}/{}\"]\nmod {};\n\n",
            dirname, file, module_name
        ));
    }

    lib_content
}
