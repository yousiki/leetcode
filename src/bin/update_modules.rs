use std::fs;
use std::io::Write;
use std::path::Path;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    println!("Scanning solutions directory...");

    let solutions_dir = Path::new("src/solutions");
    if !solutions_dir.exists() {
        eprintln!("Error: src/solutions directory does not exist!");
        std::process::exit(1);
    }

    // Read all .rs files from the solutions directory
    let mut solution_files = Vec::new();
    for entry in fs::read_dir(solutions_dir)? {
        let entry = entry?;
        let path = entry.path();

        if path.is_file() {
            if let Some(extension) = path.extension() {
                if extension == "rs" {
                    if let Some(file_name) = path.file_name() {
                        if let Some(file_name_str) = file_name.to_str() {
                            solution_files.push(file_name_str.to_string());
                        }
                    }
                }
            }
        }
    }

    // Sort files alphabetically for consistent output
    solution_files.sort();

    if solution_files.is_empty() {
        println!("No solution files found in src/solutions/");
        return Ok(());
    }

    println!("Found {} solution files:", solution_files.len());
    for file in &solution_files {
        println!("  - {}", file);
    }

    // Generate lib.rs content
    let mut lib_content = String::new();
    lib_content.push_str("// This file is automatically generated by the update_modules script.\n");
    lib_content.push_str("// Do not edit manually - your changes will be overwritten.\n\n");

    for file in &solution_files {
        let file_name_without_ext = file.strip_suffix(".rs").unwrap();
        let module_name = file_name_without_ext.replace("-", "_");

        lib_content.push_str(&format!(
            "#[path = \"solutions/{}\"]\nmod {};\n\n",
            file, module_name
        ));
    }

    // Write the updated lib.rs
    let lib_path = Path::new("src/lib.rs");
    let mut lib_file = fs::File::create(lib_path)?;
    lib_file.write_all(lib_content.as_bytes())?;

    println!(
        "Successfully updated src/lib.rs with {} modules",
        solution_files.len()
    );

    Ok(())
}
